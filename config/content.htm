<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
   
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
   
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
   
    return 0;
}
</pre>
<p></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p><h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
    // red rectangle area
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // blue rectangle area
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖
    draw_white_sun(img, center_x, center_y, sun_radius, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    float angle = 0;
    int fromX, fromY;
    int toX, toY;
    for (int i=0; i&lt;24; i++){
        angle += 5*M_PI*2/12;
        //printf("%.3f", angle);
        toX = center_x + cos(angle)*sun_radius;
        toY = center_y + sin(angle)*sun_radius;
        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖
        if (i!=0){
            gdImageLine(img, fromX, fromY, toX, toY, color);
        }
        fromX = toX;
        fromY = toY;
   }
}</pre>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;</pre>
<p style="text-align: left;">stdio.h：標準輸入輸出函數庫，用於輸出錯誤信息。</p>
<p style="text-align: left;">gd.h：圖形函數庫，用於創建和處理圖像。</p>
<p style="text-align: left;">math.h：數學函數庫，用於數學運算。</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);</pre>
<p>draw_roc_flag用來繪製ROC國旗</p>
<p>draw_white_sun用來繪製太陽</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main() {</pre>
<p>這是main主函數的開始，int是整數變數的關鍵</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int width = 1200;</pre>
<p>寬為1200，長寬比為2:3，所以高為800</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);</pre>
<p>創建彩色圖片</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }</pre>
<p>利用fopen函數打開文件，("wb")為二進位模式打開，return1表示程式有錯誤</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">  gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p>將gdlmage寫入PNG，img是圖片，9為壓縮級別（0為不壓縮，9為最大壓縮）</p>
<p>fclose(outputFile)為關閉檔案</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// Colors for the flag
red = gdImageColorAllocate(img, 242, 0, 0); // Red color
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
blue = gdImageColorAllocate(img, 0, 41, 204); // Blue</pre>
<p> gdImageColorAllocate函式為紅、白、藍顏色分配</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {</pre>
<p>void draw_white_sun函式繪製圖片</p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.0616 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<h1>w7</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);


    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_chinese_flag(gdImagePtr img);
 
int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度
 
    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);
 
    draw_chinese_flag(im);
 
    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }
 
    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}
 
// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);
 
void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;
 
    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星
 
    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);
 
    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);
 
    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);
 
    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);
 
    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}
 
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];
 
    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;
 
    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }
 
    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
 
int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;
 
    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    // 绘制英国国旗
    draw_uk_flag(img);
 
    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
 
 
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
 
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色
 
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
 
 
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
 
    int x1, y1, x2, y2, x3, y3;
 
    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
 
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
 
 
    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
 
  int x1, y1, x2, y2, x3, y3;
 
  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
 
 
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  }
 
    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
 
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
 
    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標

 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);

  {


  // 起點和終點位置

  int startX = 340;    
  // 線的起點 X 座標

  int startY = 90;   
  // 線的起點 Y 座標

  int endX = 200;     
  // 線的終點 X 座標

  int endY = 260;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);

gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 97;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 267;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }

    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/><br/><br/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/korea.mp4" type="video/mp4"/></video></p>
<p></p>
<h1>ANSIC</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()  
{
    // 印出名字
    printf("Name   : Alexandra Abramov\n"); 
    // 印出生日
    printf("DOB    : July 14, 1975\n"); 
    // 印出手機號碼
    printf("Mobile : 99-9999999999\n"); 
    // 表示程式執行成功
    return(0); 
}
</pre>
<p><img alt="" height="85" src="/images/1.1.png" width="200"/></p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main(int argc, char** argv) {
    // 檢查C標準版本
    #if __STDC_VERSION__ &gt;=  201710L
        printf("我們正在使用C18標準！\n");
    #elif __STDC_VERSION__ &gt;= 201112L
        printf("我們正在使用C11標準！\n");
    #elif __STDC_VERSION__ &gt;= 199901L
        printf("我們正在使用C99標準！\n");
    #else
        printf("我們正在使用C89/C90標準！\n");
    #endif
    // 表示程式執行成功
    return 0;
}
</pre>
<p><img alt="" height="73" src="/images/2.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main() 
{
    // 打印一行井號
    printf("######\n");
    // 打印一個單獨的井號
    printf("#\n");
    // 打印一行井號
    printf("#####\n");
    // 打印一個單獨的井號
    printf("#\n");
    
    // 打印一個單獨的井號
    printf("#\n");
    
    // 打印一個單獨的井號
    printf("#\n");
    return(0);
}</pre>
<p><img alt="" height="193" src="/images/3.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main() 
{
    // 宣告並初始化字符變數
    char char1 = 'X';
    char char2 = 'M';
    char char3 = 'L';
    // 印出原始順序和反轉順序的字符
    printf("The reverse of %c%c%c is %c%c%c\n",
        char1, char2, char3,
        char3, char2, char1);
    return(0);
}
The reverse of XML is LMX
</pre>
<p><img alt="" height="57" src="/images/4.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
/* 
   用於存儲矩形寬度和高度的變數（以英寸為單位）
*/
int width;          
int height;         
int area;           /* 用於存儲矩形的面積的變數 */
int perimeter;      /* 用於存儲矩形的周長的變數 */
int main() {
    /* 賦值給高度和寬度 */
    height = 7;
    width = 5;
    /* 計算矩形的周長 */
    perimeter = 2 * (height + width);
    printf("矩形的周長 = %d 英寸\n", perimeter);
    /* 計算矩形的面積 */
    area = height * width;
    printf("矩形的面積 = %d 平方英寸\n", area);
    return(0);
}</pre>
<p><img alt="" height="46" src="/images/5.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
    int a = 125, b = 12345;        /* 宣告並初始化整數變數 */
    long ax = 1234567890;          /* 宣告並初始化長整數變數 */
    short s = 4043;                /* 宣告並初始化短整數變數 */
    float x = 2.13459;             /* 宣告並初始化浮點數變數 */
    double dx = 1.1415927;         /* 宣告並初始化雙精度浮點數變數 */
    char c = 'W';                  /* 宣告並初始化字符變數 */
    unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */

    /* 不同資料型態之間的算術操作和型別轉換 */
    printf("a + c =  %d\n", a + c);
    printf("x + c = %f\n", x + c);
    printf("dx + x = %f\n", dx + x);
    printf("((int) dx) + ax =  %ld\n", ((int) dx) + ax);
    printf("a + x = %f\n", a + x);
    printf("s + b =  %d\n", s + b);
    printf("ax + b = %ld\n", ax + b);
    printf("s + c =  %hd\n", s + c);
    printf("ax + c = %ld\n", ax + c);
    printf("ax + ux = %lu\n", ax + ux);

    return 0;
}

</pre>
<p><img alt="" height="38" src="/images/6.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
    int a = 125, b = 12345;        /* 宣告並初始化整數變數 */
    long ax = 1234567890;          /* 宣告並初始化長整數變數 */
    short s = 4043;                /* 宣告並初始化短整數變數 */
    float x = 2.13459;             /* 宣告並初始化浮點數變數 */
    double dx = 1.1415927;         /* 宣告並初始化雙精度浮點數變數 */
    char c = 'W';                  /* 宣告並初始化字符變數 */
    unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */

    /* 不同資料型態之間的算術操作和型別轉換 */
    printf("a + c =  %d\n", a + c);
    printf("x + c = %f\n", x + c);
    printf("dx + x = %f\n", dx + x);
    printf("((int) dx) + ax =  %ld\n", ((int) dx) + ax);
    printf("a + x = %f\n", a + x);
    printf("s + b =  %d\n", s + b);
    printf("ax + b = %ld\n", ax + b);
    printf("s + c =  %hd\n", s + c);
    printf("ax + c = %ld\n", ax + c);
    printf("ax + ux = %lu\n", ax + ux);

    return 0;
}</pre>
<p><img alt="" height="173" src="/images/7.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
    int days, years, weeks;

    days = 1329; // 總天數

    // 將天數轉換成年、週和剩餘的天數
    years = days / 365; // 計算年數
    weeks = (days % 365) / 7; // 計算週數
    days = days - ((years * 365) + (weeks * 7)); // 計算剩餘的天數

    // 印出結果
    printf("年數: %d\n", years);
    printf("週數: %d\n", weeks);
    printf("天數: %d \n", days);

    return 0;
}</pre>
<p><img alt="" height="110" src="/images/8.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main() 
{
    int x, y, sum; // 宣告兩個整數和它們的總和的變數
    
    // 提示使用者輸入並將結果存儲在 'x' 中
    printf("\n輸入第一個整數: "); 
    scanf("%d", &amp;x);
    
    // 提示使用者輸入並將結果存儲在 'y' 中
    printf("\n輸入第二個整數: ");
    scanf("%d", &amp;y);
    
    sum = x + y; // 計算 'x' 和 'y' 的總和
    
    // 印出總和
    printf("\n上述兩個整數的總和 = %d\n", sum);
    
    return 0; // 表示成功執行
}</pre>
<p><img alt="" height="211" src="/images/9.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main() 
{
    int x, y, result; // 宣告兩個整數和它們的乘積的變數
    
    // 提示使用者輸入並將結果存儲在 'x' 中
    printf("\n輸入第一個整數: "); 
    scanf("%d", &amp;x);
    
    // 提示使用者輸入並將結果存儲在 'y' 中
    printf("\n輸入第二個整數: ");
    scanf("%d", &amp;y);
    
    result = x * y; // 計算 'x' 和 'y' 的乘積
    
    // 印出乘積
    printf("上述兩個整數的乘積 = %d\n", result);
}

</pre>
<p><br/><img alt="" height="200" src="/images/10.png" width="442"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // Include standard input/output library

int test(int x, int y); // Declare the function 'test' with two integer parameters

int main(void)
{
    // Call the function 'test' with arguments 1 and 2 and print the result
    printf("%d", test(1, 2));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 2 and 2 and print the result
    printf("%d", test(2, 2));
}
// Function definition for 'test'
int test(int x, int y)
{
    // Conditional expression: If x is equal to y, return (x + y) multiplied by 3, otherwise return x + y
    return x == y ? (x + y) * 3 : x + y;
}</pre>
<p><img alt="" height="112" src="/images/a-1.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // Include standard input/output library

int test(int n); // Declare the function 'test' with an integer parameter

int main(void)
{
    // Call the function 'test' with argument 53 and print the result
    printf("%d", test(53));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 30 and print the result
    printf("%d", test(30));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 51 and print the result
    printf("%d", test(51));
}

// Function definition for 'test'
int test(int n)
{
    const int x = 51; // Declare and initialize constant variable 'x'

    if (n &gt; x) // Check if 'n' is greater than 'x'
    {
        return (n - x) * 3; // Return the result of the expression (n - x) multiplied by 3
    }

    return x - n; // Return the result of the expression x minus n
}</pre>
<p><img alt="" height="112" src="/images/a-2.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; // Include standard input/output library

int test(int x, int y); // Declare the function 'test' with two integer parameters

int main(void)
{
    // Call the function 'test' with arguments 25 and 5, and print the result
    printf("%d", test(25, 5));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 20 and 30, and print the result
    printf("%d", test(20, 30));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 20 and 25, and print the result
    printf("%d", test(20, 25));
}

// Function definition for 'test'
int test(int x, int y)
{
    // Return 1 (true) if any of the following conditions are true:
    // 1. x is equal to 30
    // 2. y is equal to 30
    // 3. the sum of x and y is equal to 30
    return x == 30 || y == 30 || (x + y == 30);
}</pre>
<p><img alt="" height="128" src="/images/a-3.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main() {
    double s=0, j=1, d, i;

    // Loop to calculate the series
    for(i=1; i&lt;=7; i+=2){
        d = (i/j);
        s += d;
        j = j*2;
    }

    // Print the result
    printf("Value of series: %.2lf\n", s);

    return 0;
}</pre>
<p><img alt="" height="119" src="/images/a-4.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for absolute value function

int test(int x); // Declare the function 'test' with an integer parameter

int main(void)
{
    // Call the function 'test' with argument 103 and print the result
    printf("%d", test(103));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 90 and print the result
    printf("%d", test(90));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 89 and print the result
    printf("%d", test(89));
}

// Function definition for 'test'
int test(int x)
{
    // Check if the absolute difference between 'x' and 100 is less than or equal to 10,
    // or if the absolute difference between 'x' and 200 is less than or equal to 10.
    // Return 1 (true) if either condition is true, otherwise return 0 (false).
    if (abs(x - 100) &lt;= 10 || abs(x - 200) &lt;= 10)
        return 1;
    return 0;
}</pre>
<p><img alt="" height="130" src="/images/a-5.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for modulo operation

int test(int n); // Declare the function 'test' with an integer parameter

int main(void)
{
    // Call the function 'test' with argument 3 and print the result
    printf("%d", test(3));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 14 and print the result
    printf("%d", test(14));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 12 and print the result
    printf("%d", test(12));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with argument 37 and print the result
    printf("%d", test(37));
}

// Function definition for 'test'
int test(int n)
{
    // Check if 'n' is divisible by 3 or if 'n' is divisible by 7.
    // Return 1 (true) if either condition is true, otherwise return 0 (false).
    return n % 3 == 0 || n % 7 == 0;
}</pre>
<p><img alt="" height="159" src="/images/a-6.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for absolute value function

int test(int temp1, int temp2); // Declare the function 'test' with two integer parameters

int main(void)
{
    // Call the function 'test' with arguments 120 and -1, and print the result
    printf("%d", test(120, -1));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments -1 and 120, and print the result
    printf("%d", test(-1, 120));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 2 and 120, and print the result
    printf("%d", test(2, 120));
}

// Function definition for 'test'
int test(int temp1, int temp2)
{
    // Check if either of the following conditions are true:
    // 1. temp1 is less than 0 and temp2 is greater than 100
    // 2. temp2 is less than 0 and temp1 is greater than 100
    // Return 1 (true) if either condition is true, otherwise return 0 (false).
    return temp1 &lt; 0 &amp;&amp; temp2 &gt; 100 || temp2 &lt; 0 &amp;&amp; temp1 &gt; 100;
}</pre>
<p><img alt="" height="123" src="/images/a-7.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for absolute value function

int test(int x, int y); // Declare the function 'test' with two integer parameters

int main(void)
{
    // Call the function 'test' with arguments 100 and 199, and print the result
    printf("%d", test(100, 199));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 250 and 300, and print the result
    printf("%d", test(250, 300));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 105 and 190, and print the result
    printf("%d", test(105, 190));
}

// Function definition for 'test'
int test(int x, int y)
{
    // Check if either of the following conditions are true:
    // 1. x is between 100 and 200 (inclusive)
    // 2. y is between 100 and 200 (inclusive)
    // Return 1 (true) if either condition is true, otherwise return 0 (false).
    return (x &gt;= 100 &amp;&amp; x &lt;= 200) || (y &gt;= 100 &amp;&amp; y &lt;= 200);
}</pre>
<p><img alt="" height="130" src="/images/a-8.c.png" width="200"/><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for additional functions

// Declare the function 'test' with three integer parameters
int test(int x, int y, int z);

int main(void)
{
    // Call the function 'test' with arguments 11, 20, and 12, and print the result
    printf("%d", test(11, 20, 12));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 30, 30, and 17, and print the result
    printf("%d", test(30, 30, 17));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 25, 35, and 50, and print the result
    printf("%d", test(25, 35, 50));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 15, 12, and 8, and print the result
    printf("%d", test(15, 12, 8));
}

// Function definition for 'test'
int test(int x, int y, int z)
{
    // Check if either of the following conditions are true for any of the variables (x, y, or z):
    // 1. The variable is between 20 and 50 (inclusive)
    // Return 1 (true) if any condition is true, otherwise return 0 (false).
    return (x &gt;= 20 &amp;&amp; x &lt;= 50) || (y &gt;= 20 &amp;&amp; y &lt;= 50) || (z &gt;= 20 &amp;&amp; z &lt;= 50);
}</pre>
<p><img alt="" height="152" src="/images/a-9.c.png" width="200"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // Include standard input/output library
#include &lt;stdlib.h&gt; // Include standard library for additional functions

// Declare the function 'test' with two integer parameters
int test(int x, int y);

int main(void)
{
    // Call the function 'test' with arguments 20 and 84, and print the result
    printf("%d", test(20, 84));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 14 and 50, and print the result
    printf("%d", test(14, 50));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 11 and 45, and print the result
    printf("%d", test(11, 45));

    // Print a newline for formatting
    printf("\n");

    // Call the function 'test' with arguments 25 and 40, and print the result
    printf("%d", test(25, 40));
}

// Function definition for 'test'
int test(int x, int y)
{
    // Check if either of the following conditions are true:
    // 1. x is less than or equal to 20 OR y is greater than or equal to 50
    // 2. x is less than or equal to 20 OR y is greater than or equal to 50
    // If any of the conditions are true, return 1 (true). Otherwise, return 0 (false).
    return (x &lt;= 20 || y &gt;= 50) || (x &lt;= 20 || y &gt;= 50);
}</pre>
<p><img alt="" height="156" src="/images/a-10.c.png" width="200"/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p><h1>W12</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">  #include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="400" src="/images/hellogd.png" width="533"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;</pre>
<p>stdio.h：標準輸入輸出函數庫，用於輸出錯誤信息。</p>
<p>gd.h：圖形函數庫，用於創建和處理圖像。</p>
<p>math.h：數學函數庫，用於數學運算。</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main() {
    int width = 800;
    int height = 600;</pre>
<p>設定長為800,寬為600</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);</pre>
<p>使用gd函數創建一個彩色圖像，並設置alpha混合</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
  </pre>
<p>打開二進制寫入模式的文件("hellogd.png", "wb")作為輸出文件</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);</pre>
<p>使用gdImageColorAllocate函數設定紅、藍、黑、白</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);</pre>
<p>使用gdImageFilledRectangle函數繪製兩個矩形，一個白色，一個藍色</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);</pre>
<p>使用gdImageFilledEllipse函數繪製出一個紅色的橢圓</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);</pre>
<p>使用gdImageEllipse繪製出一個紅色橢圓的邊框</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);</pre>
<p>使用gdImagePolygon繪製出一個黑色的多邊形</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>W13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="400" src="/images/motion_plot.png" width="800"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;</pre>
<p>這裡包含標準輸出的標頭文件</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }</pre>
<p>打開"motion_data.txt"寫入模式，用於儲存運動位移和速度</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time</pre>
<p>進行週期，10秒的運動週期，計算位移速度，同時將數據寫入文件中。這個例子中，-10.0 * x - 0.5 * v，可以改變此方程式來獲得不同的運動系統</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }</pre>
<p>使用popen開啟Gnuplot的管道</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");</pre>
<p>向Gnuplot發送繪圖指令，說明繪製標題、標籤等PNG文件</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);</pre>
<p>向Gnuplot送出指令，隨後關閉通道</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p><h1>W15</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China 
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library 
// https://www.rapidtables.com/web/color/RGB_Color.html 
// 幾何形狀著色與繪圖練習 
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 
#include &lt;stdio.h&gt; 
#include &lt;gd.h&gt; 
#include &lt;math.h&gt; 
 
void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); 
 
int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 
 
    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 
 
    draw_roc_flag(img); 
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} 
 
void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 
 
   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  { 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
}</pre>
<p><img caption="false" height="267" src="/images/w152.png" width="400"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/2.mp4" type="video/mp4"/></video></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China 
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library 
// https://www.rapidtables.com/web/color/RGB_Color.html 
// 幾何形狀著色與繪圖練習 
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 
#include &lt;stdio.h&gt; 
#include &lt;gd.h&gt; 
#include &lt;math.h&gt; 

void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); 

int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 

    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 

    draw_roc_flag(img); 

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} 

void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 

   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 

     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  { 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 

     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  // 利用一個藍色大圓與白色小圓畫出藍色環狀 
  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); 
  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); 


  // 定義座標結構 
  typedef struct { 
      double x; 
      double y; 
  } Point; 

  // 計算圓與線的交點 
  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { 
      // 直線斜率 
      double m = (y2 - y1) / (x2 - x1); 

      // 直線方程式中的常數項 
      double b = y1 - m * x1; 

      // 圓與直線交點的計算 
      double A = 1 + pow(m, 2); 
      double B = 2 * (m * b - m * k - h); 
      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); 

      // 判斷交點個數 
    double discriminant = pow(B, 2) - 4 * A * C; 
    if (discriminant &gt; 0) { 
        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); 
        double y_intersect1 = m * x_intersect1 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1); 

        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); 
        double y_intersect2 = m * x_intersect2 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2); 
    } else if (discriminant == 0) { 
        double x_intersect = -B / (2 * A); 
        double y_intersect = m * x_intersect + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect); 
    } else { 
        printf("No points.\n"); 
    } 

  } 


      // 圓的參數 
      double circle_x = (int)(width/4); // 圓心 x 座標 
      double circle_y = (int)(height/4); // 圓心 y 座標 
      double radius = white_circle_dia +  white_circle_dia*2/15;   // 圓半徑 

      // 兩點座標 



  double x3 = 170; 
  double y3 = 274; 
  double x4 = 279; 
  double y4 = 165; 

  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); 


  double x5 = 279; 
  double y5 = 165; 
  double x6 = 429; 
  double y6 = 125; 

  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); 






  }</pre>
<p><img alt="" height="267" src="/images/下載.png" width="400"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/W15.mp4" type="video/mp4"/></video></p>
<h1>c_ex</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;
/* 輸出 a, b, c 到螢幕 */
printf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );
}</pre>
<p><img alt="" height="190" src="/images/001.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 64;
int b = 0x40;
long c = 64L;
printf("%d,%d,%d", a, b, c );
return 0;
}</pre>
<p><img alt="" height="105" src="/images/002-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int i;
printf("Input an integer:");
scanf( "%d", &amp;i ); /* ch 前面加個 &amp;(位址運算元) */
printf( "the number is %d", i );
return 0;
}</pre>
<p><img alt="" height="83" src="/images/003-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}
</pre>
<p><img alt="" height="156" src="/images/004-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p><img alt="" height="659" src="/images/005-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
void main()
{
int a,b;
a = 15;
b = 1;
printf("%d \n", a | b ); /* a OR b */
printf("%d \n", a &amp; b ); /* a AND b */
printf("%d \n", a ^ b ); /* a XOR b */
printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
printf("%d \n", ~a ); /* A 的補數運算 */
}</pre>
<p><img alt="" height="349" src="/images/006-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
int a;
a = 3;
printf("%d\n", !a );
a = 0;
printf("%d\n", !a );
}
</pre>
<p><img alt="" height="186" src="/images/007-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
printf("%d\n", 1 &amp;&amp; 3 );
printf("%d\n", 0 &amp;&amp; 0 );
printf("%d\n", 2 &amp;&amp; 2 );
}
</pre>
<p><img alt="" height="201" src="/images/008-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
printf("%d\n", 1 || 0 );
printf("%d\n", 0 || 0 );
printf("%d\n", 2 || 2 );
}</pre>
<p><img alt="" height="262" src="/images/009-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"> #include &lt;stdio.h&gt;
void main()
{
char a;
printf( " The size of int is %d \n", sizeof(int) );
printf( " The size of char a is %d \n", sizeof(a) );
}
</pre>
<p><img alt="" height="171" src="/images/010-2.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
char c;
printf( "Input a char:" );
scanf( "%c", &amp;c );
switch( c )
{
case 'a':
printf(" you pressed a ");
break;
case 'b':
printf(" you pressed b ");
break;
case 'c':
printf(" you pressed c ");
break;
default:
printf(" not a, b, c ");
break;
}
}</pre>
<p><img alt="" height="85" src="/images/011.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
char c;
printf( "Input a char:" );
scanf( "%c", &amp;c );
switch( c )
{
case 'a':
printf(" you pressed a ");
break;
case 'b':
printf(" you pressed b ");
break;
case 'c':
printf(" you pressed c ");
break;
}
}
</pre>
<p><img alt="" height="87" src="/images/012.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
int i, j;
for ( i = 0, j = 10; i &lt; 6; i++, j++ )
{
printf( "i = %d, ", i );
printf( "j = %d \n", j );
}
}
</pre>
<p><img alt="" height="187" src="/images/013.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
int i, j;
i = 0; j = 10; /* 迴圈外先設定初值 */
while( i &lt; 6 )
{
printf( "i = %d, ", i );
printf( "j = %d \n", j );
i++;
j++;
}
}
</pre>
<p><img alt="" height="346" src="/images/014.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int grade[5]; /* size = 5 的 array */
int i;
grade[0] = 75; /* 1st element */
grade[1] = 80; /* 2nd element */
grade[2] = 85; /* 3rd element */
grade[3] = 70; /* 4th element */
grade[4] = 90; /* 5th element */
for( i = 0; i &lt; 5; i ++ )
{
printf("Number %d = %d\n", i, grade[ i ] );
}
return 0;
}
</pre>
<p><img alt="" height="297" src="/images/015.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
char *str = "Eric";
printf( "%c", *(str+0) ); /* 也可寫 printf(“%c”,str[0] ); */
printf( "%c", *(str+1) ); /* 也可寫 printf(“%c”,str[1] ); */
printf( "%c", *(str+2) ); /* 也可寫 printf(“%c”,str[2] ); */
printf( "%c", *(str+3) ); /* 也可寫 printf(“%c”,str[3] ); */
}
</pre>
<p><img alt="" height="134" src="/images/016.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
/* 印出 Hello World! Bye Bye */
printf("Hello World! ");
printf("Bye ");
printf("Bye");
return 0;
}
</pre>
<p><img alt="" height="95" src="/images/017.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main()
{
/* 變數宣告 */
int a;
int A;
int b, c;
a = 1;
A = 8;
b = 2;
c = A - a + b; /* 先計算 A - a + b, 將結果傳會給 c */
printf( "%d", c ); /* 以 printf 印出 c 這個整數型態的變數 */
return 0;
}
</pre>
<p><img alt="" height="149" src="/images/018.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"></pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<p><img alt="" height="144" src="/images/019.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
char x, y;
x = 'a';
y = (char)97;
/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
printf( " x = %c, y = %c, ASCII of y = %d", x, y, y );
return 0;
}
</pre>
<p><img alt="" height="53" src="/images/020.png" width="400"/></p>
<p></p>
<h1>w16</h1>
<div class="line number1 index0 alt2"><code class="html plain"></code></div>
<div class="line number141 index140 alt2">
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define WIDTH 800
#define HEIGHT 600
#define SCALE 100
 
void drawResistor(gdImagePtr im, int x1, int y, int width, int height) {
    int startX = x1 ;
    int endX = x1 + width ;
 
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
  // 向上45度
    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
 
  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
   
 
  {
    int startX = 100;
  gdImageColorAllocate(im, 0, 0, 255);
 
 
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
 
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 }
 
  {
    int startX = 585;
  gdImageColorAllocate(im, 0, 0, 255);
 
 
    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
     
  // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
        // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
     
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
     
    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));
 
}
}
   
int main() {
    gdImagePtr im;
    FILE *outputFile;
 
    // 创建图像对象
    im = gdImageCreateTrueColor(WIDTH, HEIGHT);
    if (im == NULL) {
        fprintf(stderr, "Error creating GD image.\n");
        return 1;
    }
 
    outputFile = fopen("1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
 
    int black, white, red, blue, green;
 
    black = gdImageColorAllocate(im, 0, 0, 0);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 255, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 255);
green = gdImageColorAllocate(im, 0, 255, 0);
    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);
 
    // 绘制墙面
    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);
    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);
 
// 绘制彈簧
    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);
   
    // 绘制质量（方形）
    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
 
  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);
 
     
 
    gdImagePng(im, outputFile);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}</pre>
<code class="html plain"><br/><img alt="" height="300" src="/images/1.png" width="400"/></code></div>
<div class="line number141 index140 alt2">
<div>
<div class="syntaxhighlighter html" id="highlighter_942799"></div>
</div>
<div></div>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define TIME_STEP 0.01 // 时间步长
#define SIMULATION_TIME 10.0 // 模拟时间
 
// 物体的参数
#define m1 2.0
#define m2 3.0
#define k1 0.5
#define k2 1.0
#define k3 1.5
#define c1 0.25
#define c2 0.33
#define c3 0.5
#define X1_initial 1.0
#define X2_initial -0.5
#define V0 0.0
 
// 计算阻尼力
double dampingForce(double c, double v) {
    return -c * v;
}
 
// 模拟物体运动
void simulateMotion() {
    double X1 = X1_initial;
    double X2 = X2_initial;
    double V1 = V0;
    double V2 = V0;
 
    FILE *fp;
    fp = fopen("motion_data.txt", "w");
 
    for (double t = 0; t &lt;= SIMULATION_TIME; t += TIME_STEP) {
        double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一个物体受到的合力
        double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二个物体受到的合力
        double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二个物体受到的合力
 
        double a1 = F1 / m1; // 第一个物体的加速度
        double a2 = F2 / m2; // 第二个物体的加速度
 
        // 更新速度和位置
        V1 += a1 * TIME_STEP;
        V2 += a2 * TIME_STEP;
 
        X1 += V1 * TIME_STEP;
        X2 += V2 * TIME_STEP;
 
  // 在文件写入时记录 m1 和 m2 的位置和速度数据
  fprintf(fp, "%lf %lf %lf %lf %lf\n", t, X1, X2, V1, V2);
    }
 
 
    fclose(fp);
}
 
int main() {
    simulateMotion();
    return 0;
}</pre>
</div>
<div></div>
<div><img alt="" height="300" src="/images/1233.png" width="400"/></div>
<div>
<h1>教學影片</h1>
<h2>【1.電腦輔助設計室網路設定說明】</h2>
<p>(1)手動設定，所以關閉自動偵測設定</p>
<p><img alt="" height="400" src="/images/1.PNG" width="703"/></p>
<p><span>(2)手動設定IP位置</span></p>
<p><span><img alt="" height="400" src="/images/2.PNG" width="706"/></span></p>
<p><span>(3)在近端(電腦輔助設計教室)</span></p>
<p><span><img alt="" height="400" src="/images/3.PNG" width="706"/></span></p>
<p><span>(4)搜尋控制台</span></p>
<p><span><img alt="" height="400" src="/images/4.PNG" width="708"/></span></p>
<p><span>(5)框框虛擬 打勾實體</span></p>
<p><span><img alt="" height="400" src="/images/5.PNG" width="700"/></span></p>
<p><span>(6)關閉IPV4</span></p>
<p><span><img alt="" height="400" src="/images/6.PNG" width="703"/></span></p>
<p><span>(7)開啟IPV6</span></p>
<p><span><img alt="" height="400" src="/images/7.PNG" width="706"/></span></p>
<p><span>(8)設定DNS</span></p>
<p><span><img alt="" height="400" src="/images/8.PNG" width="706"/></span></p>
<p><span>(9)利用隨身碟批次檔案 設定網路環境</span></p>
<p><span><img alt="" height="400" src="/images/9.PNG" width="703"/></span></p>
<p><span>(10)放入對應檔案</span></p>
<p><span><img alt="" height="400" src="/images/10.PNG" width="706"/></span></p>
<p><span>(11)關閉IPV4 開啟IPV6</span></p>
<p><span><img alt="" height="400" src="/images/11.PNG" width="710"/></span></p>
<h2>【2. Wink 網路設定】</h2>
<p><span>(1)</span></p>
<p><span><img alt="" height="400" src="/images/2-1.PNG" width="644"/></span></p>
<p><span>(2)</span></p>
<p><span><img alt="" height="400" src="/images/2-2.PNG" width="643"/></span></p>
<p><span>(3)</span></p>
<p><span><img alt="" height="400" src="/images/2-3.PNG" width="645"/></span></p>
<p><span>(4)</span></p>
<p><span><img alt="" height="400" src="/images/2-4.PNG" width="705"/></span></p>
<p><span>(5)</span></p>
<p><span><img alt="" height="400" src="/images/2-5.PNG" width="703"/></span></p>
<p><span>(6)</span></p>
<p><span><img alt="" height="400" src="/images/2-6.PNG" width="706"/></span></p>
<p><span>(7)</span></p>
<p><img alt="" height="400" src="/images/2-7.PNG" width="729"/></p>
<p><span>(8)</span></p>
<p><img alt="" height="400" src="/images/2-8.PNG" width="688"/></p>
<p><span>(9)</span></p>
<p><span><img alt="" height="503" src="/images/2-9.PNG" width="800"/></span></p>
<h2>【4. 安裝與課程相關的 Apps, 網路設定與 ChatGPT 應用】</h2>
<p>(1)手機安裝Apps:ChatGPT, Github mobile, Replit, Authy, Teams, Onshape</p>
<p>(2)有技巧詢問ChatGPT</p>
<p>手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用.<br/>Replit App 利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯.<br/>Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code.<br/>Teams App 利用手機參與 Microsoft 線上團隊課程.<br/>Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件.</p>
<p>(3)在命令搜尋區輸入 cmd (command 命令提示字元), 後利用 ipconfig /all 指令取得目前的網路設定.</p>
<p>2001開始的為外部IP.</p>
<p>f180為內部.</p>
<p>192.168.1為內部IPv4.</p>
<p>利用【自動】取的IP位置可減少網路重疊.</p>
<p>140.130.1為學校網段.</p>
<p></p>
<p>(4)Q:為甚麼會有兩個冒號?</p>
<p>    A:因為總共有8個區段，中間有4個區段為0.</p>
<p></p>
<p>(5)Q:出現防火牆把網路關閉?</p>
<p>     A:因為電腦中有軟體有問題被防毒軟體誤會要入侵系統才會把網路關閉</p>
<h2>【5. 可攜程式環境的設定說明, 如何在可攜環境中編譯執行 C 程式】</h2>
<p><span>(1)這門課的可攜環境，雙點擊可以在近端啟動可攜程式環境.</span></p>
<p><span><img alt="" height="400" src="/images/5-1.PNG" width="894"/></span></p>
<p><span>(2)開啟(必須在檢視-顯示項目下勾選"副檔名"與"隱藏的項目").</span></p>
<p><span><img alt="" height="400" src="/images/5-2.PNG" width="507"/><br/></span></p>
<p><span>(3)會跳出4個命令</span></p>
<p><span><img alt="" height="200" src="/images/5-3.PNG" width="1099"/></span></p>
<p><span>(4)</span></p>
<p><span><img alt="" height="500" src="/images/5-4.PNG" width="722"/></span></p>
<p>(5)</p>
<p><img alt="" height="600" src="/images/5-5.PNG" width="540"/></p>
<p><span>(6)用 SciTE 編輯器中的 Tools - Go 功能表執行 ANSI C 程式</span></p>
<p><span><img alt="" height="400" src="/images/5-6.PNG" width="697"/></span></p>
<p> <span>(7)10次hello world</span></p>
<p><img alt="" height="500" src="/images/5-7.PNG" width="734"/></p>
<p><span>(8)清除output</span></p>
<p><span><img alt="" height="500" src="/images/5-8.PNG" width="739"/></span></p>
<h2>【9. Github 倉儲設定 Pages 靜態網站】</h2>
<p><strong><span>(1)利用主分支建立網頁:Source來源/Branch分支/main主分支</span></strong></p>
<p><strong><span><img alt="" height="400" src="/images/9-1.PNG" width="767"/></span></strong></p>
<p><strong><span>(2)網頁根目錄</span></strong></p>
<p><strong><span><img alt="" height="400" src="/images/9-2.PNG" width="764"/></span></strong></p>
<p><strong><span>(3)mdecp2023.github.io/倉儲名稱</span></strong></p>
<p><strong><span><img alt="" height="78" src="/images/9-3.PNG" width="800"/></span></strong></p>
<p><strong><span>(4)</span></strong></p>
<p><strong><span><img alt="" height="420" src="/images/9-4.PNG" width="800"/></span></strong></p>
<p><strong><span>(5)網址</span></strong></p>
<p><strong><span><img alt="" height="419" src="/images/9-5.PNG" width="800"/></span></strong></p>
<p><strong>【10. 在 Repllit 中編譯執行 C 程式】</strong></p>
<p><strong><span>(1)靜態</span></strong></p>
<p><strong><span><img alt="" height="417" src="/images/10-1.PNG" width="800"/></span></strong></p>
<p><span>(2)推送內容及進度</span></p>
<p><img alt="" height="422" src="/images/10-2.PNG" width="800"/></p>
<p><span>(3)創建.c</span></p>
<p><img alt="" height="417" src="/images/10-3.PNG" width="800"/></p>
<p><strong><span>(4)在 Shell 打Clear/cd downloads/cc gnuplot_ex1.c/./a.out</span></strong></p>
<p><strong><span><img alt="" height="417" src="/images/10-4.PNG" width="800"/></span></strong></p>
<p><strong><span>(5)跑出圖片</span></strong></p>
<p><strong><img alt="" height="420" src="/images/10-5.PNG" width="800"/></strong></p>
<p><span>(6)C++/複製程式</span></p>
<p><span><img alt="" height="422" src="/images/10-6.PNG" width="800"/></span></p>
<p><span>(7)貼上圖片</span></p>
<p><span><img alt="" height="421" src="/images/10-7.PNG" width="800"/></span></p>
<p><span>(8)推上網站</span></p>
<p><span><img alt="" height="416" src="/images/10-8.PNG" width="800"/></span></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>【1.電腦輔助設計室網路設定說明】</h2>
<p><strong></strong></p>
<p><strong></strong></p>
<p><strong><span>(1)手動設定，所以關閉自動偵測設定</span></strong></p>
<p><strong><span><img alt="" height="400" src="/images/1.PNG" width="703"/></span></strong></p>
<p><strong><span>(2)手動設定IP位置</span></strong></p>
<p><strong><span><img alt="" height="400" src="/images/2.PNG" width="706"/></span></strong></p>
<p><strong><span>(3)在近端(電腦輔助設計教室)</span></strong></p>
<p><strong><span></span></strong></p>
<h1>期末總結</h1>
<p><span>A: 按照進度明確標示倉儲的改版歷程</span></p>
<p><span><span><span>D：完成課程內容中的練習-<a href="https://41223206.github.io/cp2023/content/ANSIC.html">ANSIC</a></span></span></span></p>
<p><span><span><span>E：完成<span> </span><span><span>w2-w5</span></span><span> </span><span><span>週任務中的練習-<a href="https://41223206.github.io/cp2023/content/c_ex.html">c_ex</a></span></span></span></span></span></p>
<p><span><span>F:完成 <a href="https://mde.tw/cpnote/content/w6-w7.html"><span><span>w6-w7</span></span></a><span><span> </span><span><span>週任務中的練習一與練習二 -<a href="https://41223206.github.io/cp2023/content/ANSIC.html">ANSIC</a><a href="https://41223206.github.io/cp2023/content/c_ex.html">c_ex</a></span></span></span></span></span></p>
<p><span><span><span>G：完成C結合gd繪圖程式庫，畫出<a href="https://en.wikipedia.org/wiki/Flag_of_China"><span>PROC</span></a><span>（</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg"><span>規格</span></a><span>），</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom"><span>英國</span></a><span>（</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg"><span>規格</span></a><span>），</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan"><span>日本</span></a><span>（</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg"><span>規格</span></a><span>）和</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea"><span>韓國</span></a><span>（</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"><span>規格</span></a><span>）標誌。(<a href="https://41223206.github.io/cp2023/content/w6.html">w6</a>),(<a href="https://41223206.github.io/cp2023/content/w7.html">w7</a>)</span></span></span></span></p>
<p><span><span><span><span>H：完成<a href="https://41223206.github.io/cp2023/content/w16.html">w16最終專案</a></span></span></span></span></p><h1>心得</h1>
<p><strong><span></span></strong>在這堂課程中我學到了，網路設定以及為何要這麼做的理由，觸碰到了自己完全沒進入的領域，知道了我們所使用的軟體後面究竟是如何操作的，了解到英文是多麼重要且必須學習的，如何編輯網頁，如何更改等，無限循環著老師所拍攝的影片，課後老師也時常分享最近資訊趨勢是如何發展的。</p>
<p>嘴上總是說會打程式，知道如何將圖顯示出來，但當老師期末的單獨詢問才發現，原來自己其實並不了解程式本身的含義，課後使用Chatgpt才淺淺的了解到，為何需要使用此程式，若是沒有這個程式，會形成怎麼樣的結果。</p>
<p>因自身英文底子並不好，所以需要每條都詢問gpt去了解，或是透過老師來告知，老師常常訴說著以前學長姐的成就來提醒我們，有哪裡是我們需要加強的，學習的越細緻越不容易被取代，讓我更了解未來的科技趨勢，以及如何去面對及籌備自身技能。</p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>
</div>